<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\Playlist;
use SpotifyWebAPI\SpotifyWebAPI;
use SpotifyWebAPI\Session;

class SpotifyController extends Controller
{
        public function redirectToSpotify()
    {

        $session = new Session(
            config('services.spotify.client_id'),
            config('services.spotify.client_secret'),
            config('services.spotify.redirect')
        );

        $options = [
            'scope' => [
                'playlist-modify-public',
                'playlist-modify-private'
            ]
        ];

        session(['spotify_state' => $session->generateState()]);

        return redirect($session->getAuthorizeUrl($options));
    }

    public function handleCallback(Request $request)
    {

        $session = new Session(
            config('services.spotify.client_id'),
            config('services.spotify.client_secret'),
            config('services.spotify.redirect')
        );

        $session->requestAccessToken($request->code);

        session([
            'spotify_access_token' => $session->getAccessToken(),
            'spotify_refresh_token' => $session->getRefreshToken(),
        ]);

        return redirect()->route('playlist.index')->with('success', 'Spotify account connected!');
    }


    public function export(Request $request, Playlist $playlist)
    {

        if (!Auth::check()) {
            return redirect()->route('login');
        }

        if ($playlist->user_id !== Auth::id()) {
            abort(403);
        }

        $session = new Session(
            config('services.spotify.client_id'),
            config('services.spotify.client_secret'),
            config('services.spotify.redirect')
        );

        $accessToken = session('spotify_access_token');
        $refreshToken = session('spotify_refresh_token');

        $api = new SpotifyWebAPI();

        if (!$accessToken || !$refreshToken) {
            return redirect()->route('spotify.auth');
        }

        $api->setAccessToken($accessToken);

        try {
            $me = $api->me();
        } catch (\SpotifyWebAPI\SpotifyWebAPIException $e) {
            if ($e->getMessage() === 'The access token expired') {
                $session->refreshAccessToken($refreshToken);
                $accessToken = $session->getAccessToken();
                session(['spotify_access_token' => $accessToken]);
                $api->setAccessToken($accessToken);
            } else {
                return back()->with('error', 'Spotify token error: ' . $e->getMessage());
            }
        }

        $userId = $api->me()->id;

        $spotifyPlaylist = $api->createPlaylist($userId, [
            'name' => $playlist->name,
            'description' => 'Generated by MoodMix',
            'public' => false
        ]);

        $uris = $playlist->songs->pluck('spotify_uri')->filter()->toArray();
        $chunks = array_chunk($uris, 100);

        foreach ($chunks as $chunk) {
            $api->addPlaylistTracks($spotifyPlaylist->id, $chunk);
        }

        // Redirect with message and link
        $spotifyUrl = 'https://open.spotify.com/playlist/' . $spotifyPlaylist->id;
        return redirect()
            ->route('playlist.show', $playlist)
            ->with('success', 'Your playlist has been exported! <a href="' . $spotifyUrl . '" target="_blank" style="color: #c4b537; text-decoration: underline;">Tap here to check it out!</a>');
    }

}
